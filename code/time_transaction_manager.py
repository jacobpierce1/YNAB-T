import gui_config 
from time_transaction import TimeTransaction

import sqlite3 
import os 


TASKS_DATABASE_PATH = gui_config.data_path + 'task_db.sqlite3'

TABLE_NAME = 'time_transactions'


DB_SCHEMA = '''
CREATE TABLE  %s  (
	task_id integer PRIMARY KEY,
	task_name text NOT NULL,
	start_time timestamp NOT NULL, 
	end_time timestamp NOT NULL
);

CREATE INDEX start_time_index on %s( start_time );
''' % ( TABLE_NAME, TABLE_NAME )





class TimeTransactionDB( object ) : 

	def __init__( self ) : 
		if not os.path.exists( TASKS_DATABASE_PATH ) : 
			db_exists = 0 
		else : 
			db_exists = 1 

		self.conn = sqlite3.connect( TASKS_DATABASE_PATH )
		self.cursor = self.conn.cursor()

		if not db_exists : 
			self.cursor.executescript( DB_SCHEMA )


	def insert_transaction( self, transaction ) : 
		cmd = 'INSERT INTO %s( task_id, task_name, start_time, end_time) VALUES (?,?,?,?)' % TABLE_NAME
		self.cursor.execute( cmd, transaction.to_tuple() )
		self.conn.commit() 


	def update_end_time( self, task_id, end_time ) : 
		cmd = 'UPDATE %s SET end_time = (?) where task_id = (?)' % table_name 
		self.cursor.execute( cmd, end_time, task_id )
		self.conn.commit() 


	def delete_transaction( self, task_id ) : 
		cmd = 'DELETE FROM %s WHERE task_id = (?)' % TABLE_NAME
		self.cursor.execute( cmd, task_id )
		self.conn.commit() 


	# a unique task id is not generated by the number of rows, since that
	# fails if a single row is deleted .
	def get_unique_task_id( self ) : 
		
		cmd = 'SELECT MAX( task_id ) FROM %s' % TABLE_NAME
		ans = self.cursor.execute( cmd ).fetchall()[0][0]

		print( ans ) 

		# database is empty 
		if ans is None : 
			ans = 0 

		print( 'time_transaction_manager.py:: get_unique_task_id: ans=%d' % ans )

		return ans + 1 

	# def __get__( self, task_id ) : 
	# 	...




class TimeTransactionManager( object ) :

	def __init__( self, controller ) :

		self.controller = controller 
		self.db = TimeTransactionDB() 

		
		# self.tasks_database = 
	def init( self ) : 
		...	

	def compute_progress_for_timescale( self, timescale, date ) : 
		... 

	def rename_entries( self, old_name, new_name ) : 
		... 


	def sync_current_progress_file( self ) : 
		... 

	# get N most recent transactions 
	def get_recent_transactions( self, N ) : 
		...
